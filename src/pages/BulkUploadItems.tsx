import { useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useUserRole } from '@/hooks/useUserRole';
import { ArrowLeft, Upload, FileDown, FileSpreadsheet, RefreshCw, CheckCircle2, AlertCircle } from 'lucide-react';
import * as XLSX from 'xlsx';
import { toast } from 'sonner';

interface ParsedItemRow {
  name: string;
  code?: string;
  description?: string;
  category_name: string;
  quantity: number;
  location?: string;
  status?: string;
}

interface CategoryMap {
  [name: string]: string; // name -> id
}

const TEMPLATE_HEADERS = [
  'name',
  'code(optional)',
  'description(optional)',
  'category_name',
  'quantity',
  'location(optional)',
  'status(optional)'
];

export default function BulkUploadItems() {
  const navigate = useNavigate();
  const { hasRole, getUserDepartment, getUserDepartmentId, departments } = useUserRole();
  const [fileName, setFileName] = useState<string>('');
  const [previewRows, setPreviewRows] = useState<ParsedItemRow[]>([]);
  const [parsing, setParsing] = useState(false);
  const [importing, setImporting] = useState(false);
  const [categoryMap, setCategoryMap] = useState<CategoryMap>({});
  const [autoGeneratedCodes, setAutoGeneratedCodes] = useState<Record<string,string>>({});
  // Tambahan state fitur lanjutan
  const [selectedDeptId, setSelectedDeptId] = useState<string>(""); // untuk admin memilih departemen target
  const [duplicateCodes, setDuplicateCodes] = useState<string[]>([]);
  const [checkingDuplicates, setCheckingDuplicates] = useState(false);

  const isAllowed = hasRole('admin') || hasRole('owner');
  const userDeptId = getUserDepartmentId();
  const userDeptName = getUserDepartment();

  const generateCode = (base: string) => {
    const prefix = base.replace(/[^A-Za-z0-9]/g,'').toUpperCase().slice(0,4) || 'ITEM';
    return `${prefix}-${Date.now().toString().slice(-6)}-${Math.floor(Math.random()*1000).toString().padStart(3,'0')}`;
  };

  const downloadTemplate = () => {
    const ws = XLSX.utils.aoa_to_sheet([
      TEMPLATE_HEADERS,
      ['Laptop Acer','','','Elektronik',5,'Ruang IT','available'],
      ['Kabel HDMI','','','Elektronik',10,'Gudang Media','available'],
      ['Proyektor Epson','','','Elektronik',2,'Lab Multimedia','maintenance']
    ]);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Template');
    XLSX.writeFile(wb, 'template_upload_inventaris.xlsx');
  };

  const normalizeHeader = (h: string) => h.trim().toLowerCase();

  const parseFile = useCallback(async (file: File) => {
    setParsing(true);
    try {
      const data = await file.arrayBuffer();
      const wb = XLSX.read(data, { type: 'array' });
      const sheet = wb.Sheets[wb.SheetNames[0]];
      const json = XLSX.utils.sheet_to_json<Record<string, unknown>>(sheet, { defval: '' });
      if (!json.length) {
        toast.error('File kosong');
        return;
      }

      // Ambil kategori dari database untuk mapping nama -> id (global + dept)
      const { data: categories, error: catErr } = await supabase.from('categories').select('id,name');
      if (catErr) throw catErr;
      const map: CategoryMap = {};
      (categories||[]).forEach((c: { id: string; name: string }) => { map[c.name.toLowerCase()] = c.id; });
      setCategoryMap(map);

      const rows: ParsedItemRow[] = [];
      const genCodes: Record<string,string> = {};

      for (const raw of json) {
        const tmp: Record<string, unknown> = {};
        Object.keys(raw).forEach(k => { tmp[normalizeHeader(k)] = (raw as Record<string, unknown>)[k]; });
        if (!tmp['name'] || !tmp['category_name'] || !tmp['quantity']) continue;
        const quantity = Number(tmp['quantity']);
        if (Number.isNaN(quantity) || quantity <= 0) continue;
        let code = (tmp['code(optional)'] as string | undefined)?.toString().trim();
        const nameStr = String(tmp['name']);
        if (!code) {
          code = generateCode(nameStr);
          genCodes[nameStr+quantity] = code;
        }
        rows.push({
          name: nameStr.trim(),
          code,
          description: (tmp['description(optional)'] as string | undefined)?.toString().trim() || '',
          category_name: String(tmp['category_name']).trim(),
          quantity,
            location: (tmp['location(optional)'] as string | undefined)?.toString().trim() || '',
          status: (tmp['status(optional)'] as string | undefined)?.toString().trim().toLowerCase() || 'available'
        });
      }

      if (!rows.length) {
        toast.error('Tidak ada baris valid ditemukan');
        return;
      }

      setAutoGeneratedCodes(genCodes);
      setPreviewRows(rows);
      toast.success(`${rows.length} baris siap diimport`);
    } catch (err) {
      console.error(err);
      toast.error('Gagal parsing file');
    } finally {
      setParsing(false);
    }
  }, []);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFileName(file.name);
      parseFile(file);
      setDuplicateCodes([]);
    }
  };

  const ensureCategory = async (name: string): Promise<string | null> => {
    const key = name.toLowerCase();
    if (categoryMap[key]) return categoryMap[key];

    // Buat kategori baru jika belum ada (owner -> kategori dept, admin -> global)
    const insertData: { name: string; department?: string } = { name };
    if (hasRole('owner') && !hasRole('admin') && getUserDepartment()) {
      insertData.department = getUserDepartment();
    }
    const { data: newCat, error } = await supabase.from('categories').insert([insertData]).select().single();
    if (error) { console.error('Kategori gagal dibuat', error); return null; }
    setCategoryMap(prev => ({ ...prev, [key]: newCat.id }));
    return newCat.id;
  };
  const handleImport = async () => {
    if (!isAllowed) {
      toast.error('Akses ditolak');
      return;
    }
    if (!previewRows.length) {
      toast.error('Tidak ada data untuk diimport');
      return;
    }
    // Owner wajib punya dept id
    if (hasRole('owner') && !hasRole('admin') && !userDeptId) {
      toast.error('Departemen Anda belum terdeteksi');
      return;
    }
    // Admin wajib pilih departemen target (sementara all imported item harus punya dept)
    if (hasRole('admin') && !selectedDeptId) {
      toast.error('Silakan pilih departemen target');
      return;
    }

    // Cek duplikasi kode di DB terlebih dulu
    setCheckingDuplicates(true);
    try {
      const candidateCodes = Array.from(new Set(previewRows.map(r => r.code).filter(Boolean) as string[]));
      if (candidateCodes.length) {
        const found: string[] = [];
        const chunkSize = 50;
        for (let i = 0; i < candidateCodes.length; i += chunkSize) {
          const slice = candidateCodes.slice(i, i + chunkSize);
          const { data, error } = await supabase.from('items').select('code').in('code', slice);
          if (error) throw error;
          if (data) data.forEach(d => { if (d.code) found.push(d.code); });
        }
        if (found.length) {
          setDuplicateCodes(found);
          toast.error(`Ada ${found.length} kode sudah terpakai. Perbaiki dulu.`);
          setCheckingDuplicates(false);
          return;
        }
      }
    } catch (dupErr) {
      console.error('Cek duplikasi gagal', dupErr);
      toast.error('Gagal cek duplikasi kode');
      setCheckingDuplicates(false);
      return;
    }
    setCheckingDuplicates(false);

    setImporting(true);
    try {
      type ItemStatus = 'available' | 'maintenance' | 'reserved' | 'damaged' | 'lost';
      interface InsertItem { name: string; code: string; description: string | null; category_id: string; department_id: string | null; quantity: number; available_quantity: number; status: ItemStatus; location: string | null }
      const itemsToInsert: InsertItem[] = [];
      for (const row of previewRows) {
        const catId = await ensureCategory(row.category_name);
        if (!catId) continue;
        const rawStatus = (row.status || 'available').toLowerCase();
        const status: ItemStatus = ['available','maintenance','reserved','damaged','lost'].includes(rawStatus) ? rawStatus as ItemStatus : 'available';
        itemsToInsert.push({
          name: row.name,
          code: row.code || generateCode(row.name),
          description: row.description || null,
          category_id: catId,
          department_id: hasRole('admin') ? selectedDeptId : userDeptId,
          quantity: row.quantity,
          available_quantity: row.quantity,
          status,
          location: row.location || null
        });
      }
      if (!itemsToInsert.length) {
        toast.error('Tidak ada baris valid untuk disimpan');
        return;
      }
      const { error } = await supabase.from('items').insert(itemsToInsert);
      if (error) throw error;
      toast.success(`Berhasil import ${itemsToInsert.length} barang`);
      navigate('/manage-inventory');
    } catch (err) {
      console.error('Import error', err);
      toast.error('Gagal import data');
    } finally {
      setImporting(false);
    }
  };

  if (!isAllowed) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 pb-24 safe-area-pb flex items-center justify-center">
        <Card className="neu-raised border-0 max-w-md w-full mx-4">
          <CardHeader>
            <CardTitle>Akses Ditolak</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-sm text-gray-600 mb-4">Hanya admin atau owner yang dapat mengakses fitur ini.</p>
            <Button onClick={() => navigate('/manage-inventory')} className="w-full bg-blue-600 text-white">Kembali</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 pb-32 safe-area-pb">
      {/* Header */}
      <div className="sticky top-0 z-40 bg-white/95 backdrop-blur-sm border-b border-gray-200">
        <div className="px-4 py-4 safe-area-pt flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Button 
              variant="ghost" 
              size="icon"
              onClick={() => navigate('/manage-inventory')}
              className="neu-button-raised rounded-xl hover:neu-button-pressed transition-all bg-gray-100 text-gray-700 hover:bg-gray-200"
            >
              <ArrowLeft className="h-5 w-5" />
            </Button>
            <div>
              <h1 className="text-lg font-bold text-gray-900">Upload Excel Barang</h1>
              <p className="text-xs text-gray-600">Import banyak barang sekaligus melalui template</p>
            </div>
          </div>
        </div>
      </div>

      <div className="px-4 py-5 space-y-5">
        <Card className="neu-raised border-0">
          <CardHeader className="pb-2">
            <CardTitle className="text-base flex items-center gap-2">
              <FileSpreadsheet className="h-4 w-4 text-blue-600" />
              Panduan & Template
            </CardTitle>
          </CardHeader>
          <CardContent className="text-sm space-y-3 leading-relaxed">
            <p>
              Gunakan template Excel untuk menambahkan barang secara massal. Kolom wajib: <Badge>name</Badge>, <Badge>category_name</Badge>, <Badge>quantity</Badge>. Kolom lain opsional.
            </p>
            {hasRole('admin') && (
              <div className="space-y-2">
                <p className="text-xs font-medium text-gray-600">Departemen Target (Admin)</p>
                <Select value={selectedDeptId} onValueChange={setSelectedDeptId}>
                  <SelectTrigger className="h-10 neu-sunken border-0 bg-white/60">
                    <SelectValue placeholder="Pilih departemen" />
                  </SelectTrigger>
                  <SelectContent>
                    {departments?.map(d => (
                      <SelectItem key={d.id} value={d.id}>{d.name}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {!selectedDeptId && <p className="text-[10px] text-red-500">Wajib dipilih sebelum import</p>}
              </div>
            )}
            <ul className="list-disc pl-5 space-y-1 text-gray-600">
              <li>Jika kode kosong akan digenerate otomatis</li>
              <li>category_name akan dibuatkan kategori baru jika belum ada</li>
              <li>Status valid: available, maintenance, reserved, damaged, lost</li>
              <li>Jumlah harus angka positif</li>
            </ul>
            <div className="flex gap-3 pt-2 flex-wrap">
              <Button onClick={downloadTemplate} className="bg-blue-600 hover:bg-blue-700 text-white neu-button-raised hover:neu-button-pressed border-0">
                <FileDown className="h-4 w-4 mr-2" /> Download Template
              </Button>
              <div>
                <input id="file-input" aria-label="Pilih file excel" type="file" accept=".xlsx,.xls" className="hidden" onChange={handleFileChange} />
                <Button type="button" onClick={() => document.getElementById('file-input')?.click()} variant="outline" className="neu-button-raised hover:neu-button-pressed bg-gray-100 text-gray-700 hover:bg-gray-200 border-0">
                  <Upload className="h-4 w-4 mr-2" /> Pilih File
                </Button>
              </div>
              {fileName && (
                <Badge variant="outline" className="bg-white/60">{fileName}</Badge>
              )}
            </div>
            {parsing && (
              <div className="flex items-center text-xs text-gray-500 gap-2">
                <RefreshCw className="h-3 w-3 animate-spin" /> Memproses file...
              </div>
            )}
            {duplicateCodes.length > 0 && (
              <Alert className="neu-sunken bg-red-50/70 border-0">
                <AlertDescription className="text-xs text-red-700">
                  Kode duplikat terdeteksi: {duplicateCodes.slice(0,8).join(', ')}{duplicateCodes.length>8 && ' ...'} (total {duplicateCodes.length}). Edit file lalu unggah ulang.
                </AlertDescription>
              </Alert>
            )}
          </CardContent>
        </Card>

        {previewRows.length > 0 && (
          <Card className="neu-raised border-0">
            <CardHeader className="pb-2">
              <CardTitle className="text-base flex items-center gap-2">
                <Upload className="h-4 w-4 text-green-600" />
                Preview Data ({previewRows.length} baris)
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="max-h-64 overflow-auto rounded-lg border border-gray-200 bg-white">
                <table className="w-full text-xs">
                  <thead className="bg-gray-50 sticky top-0">
                    <tr>
                      <th className="p-2 text-left font-medium">Name</th>
                      <th className="p-2 text-left font-medium">Code</th>
                      <th className="p-2 text-left font-medium">Category</th>
                      <th className="p-2 text-left font-medium">Qty</th>
                      <th className="p-2 text-left font-medium">Status</th>
                      <th className="p-2 text-left font-medium">Location</th>
                    </tr>
                  </thead>
                  <tbody>
                    {previewRows.map((r,i) => (
                      <tr key={i} className="border-t border-gray-100">
                        <td className="p-2 font-medium text-gray-800">{r.name}</td>
                        <td className="p-2 text-gray-600">{r.code}</td>
                        <td className="p-2 text-gray-600">{r.category_name}</td>
                        <td className="p-2 text-gray-800">{r.quantity}</td>
                        <td className="p-2 text-gray-600">{r.status}</td>
                        <td className="p-2 text-gray-600">{r.location}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              {Object.keys(autoGeneratedCodes).length > 0 && (
                <Alert className="neu-sunken bg-blue-50/60 border-0">
                  <AlertDescription className="text-xs text-blue-800 flex items-center gap-2">
                    <CheckCircle2 className="h-4 w-4 text-blue-600" /> {Object.keys(autoGeneratedCodes).length} kode otomatis dibuat untuk baris tanpa kode.
                  </AlertDescription>
                </Alert>
              )}
              <div className="flex gap-3">
                <Button onClick={handleImport} disabled={importing || checkingDuplicates || (hasRole('admin') && !selectedDeptId)} className="flex-1 bg-green-600 hover:bg-green-700 text-white neu-button-raised hover:neu-button-pressed border-0">
                  {(importing || checkingDuplicates) ? <><RefreshCw className="h-4 w-4 mr-2 animate-spin" /> {checkingDuplicates ? 'Cek Duplikasi...' : 'Mengimpor...'}</> : 'Import Sekarang'}
                </Button>
                <Button onClick={() => { setPreviewRows([]); setFileName(''); setDuplicateCodes([]); }} type="button" variant="outline" className="flex-1 neu-button-raised hover:neu-button-pressed bg-gray-100 text-gray-700 hover:bg-gray-200 border-0">
                  Reset
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {previewRows.length === 0 && !parsing && (
          <Alert className="neu-sunken bg-yellow-50/60 border-0">
            <AlertDescription className="text-xs text-yellow-800 flex gap-2 items-center">
              <AlertCircle className="h-4 w-4" /> Belum ada file dipilih. Download template lalu isi datanya.
            </AlertDescription>
          </Alert>
        )}
      </div>
    </div>
  );
}
